{"version":3,"sources":["types/relations.ts","config.ts","types/vector.ts","components/Ball.tsx","components/Tracker.tsx","components/Canvas.tsx","components/Form.tsx","components/Stats.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["RelationTypes","config","canvasWidth","window","innerWidth","canvasHeight","innerHeight","ballRadius","maxVelocity","initialInfectious","initialPopulationSize","transmissionRate","timeToRemoved","Vector","x","y","this","vector","Math","sqrt","magnitude","n","rand","max","floor","random","Ball","ctx","index","position","velocity","relation","radius","count","round","INFECTIOUS","SUSCEPTIBLE","fillStyle","REMOVED","getBallColor","shadowColor","getShadowColor","shadowBlur","save","scale","translate","path","Path2D","moveTo","arc","PI","fill","restore","draw","setTimeout","ball","tempVelocity","Tracker","width","height","popSize","stats","balls","populate","update","coinFlip","lengthBalls","length","clearRect","forEach","i","j","isCollided","collide","tryInfect","requestAnimationFrame","ball1","ball2","distance","newBall","push","S","I","R","map","type","console","log","Canvas","props","ref","useRef","useEffect","current","getContext","tracker","populationSize","setInterval","getStats","handleSetStats","clearInterval","Form","className","htmlFor","aria-describedby","id","value","onChange","setPopulationSize","name","setTimeToRemoved","setTransmissionRate","ListItem","bgColor","textColor","text","Stats","susceptible","infected","removed","App","useState","susceptibleCount","setSusceptibleCount","infectedCount","setInfectedCount","removedCount","setRemovedCount","handleUpdateStats","e","parseInt","target","parseFloat","useCallback","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","rootEl","document","getElementById","ReactDOM","createRoot","render","StrictMode","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.dc0f4584.chunk.js","sourcesContent":["export enum RelationTypes {\r\n  INFECTIOUS = \"INFECTIOUS\",\r\n  SUSCEPTIBLE = \"SUSCEPTIBLE\",\r\n  REMOVED = \"REMOVED\"\r\n}\r\n","export const config = {\r\n  canvasWidth: window.innerWidth * 0.8,\r\n  canvasHeight: window.innerHeight * 0.8,\r\n  ballRadius: 5,\r\n  maxVelocity: 1,\r\n  initialInfectious: 10,\r\n  initialPopulationSize: 1000,\r\n  transmissionRate: 0.02,\r\n  timeToRemoved: 10\r\n};\r\n","export class Vector {\r\n  public x: number;\r\n  public y: number;\r\n  constructor(x: number, y: number) {\r\n    this.x = x;\r\n    this.y = y;\r\n  }\r\n\r\n  add(vector: Vector) {\r\n    return new Vector(this.x + vector.x, this.y + vector.y);\r\n  }\r\n\r\n  magnitude() {\r\n    return Math.sqrt(this.x ** 2 + this.y ** 2);\r\n  }\r\n\r\n  dot(vector: Vector) {\r\n    return this.x * vector.x + this.y * vector.y;\r\n  }\r\n\r\n  normalize() {\r\n    return new Vector(this.x / this.magnitude(), this.y / this.magnitude());\r\n  }\r\n\r\n  scale(n: number) {\r\n    return new Vector(this.x * n, this.y * n);\r\n  }\r\n}\r\n","import { config } from \"../config\";\r\nimport { RelationTypes } from \"../types/relations\";\r\nimport { Vector } from \"../types/vector\";\r\n\r\nconst rand = (max: number) => 1 + Math.floor(Math.random() * max);\r\nconst getBallColor = (relation: RelationTypes) => {\r\n  switch (relation) {\r\n    case RelationTypes.INFECTIOUS:\r\n      return \"red\";\r\n    case RelationTypes.REMOVED:\r\n      return \"white\";\r\n    default:\r\n      return \"dodgerblue\";\r\n  }\r\n};\r\nconst getShadowColor = (relation: RelationTypes) => {\r\n  switch (relation) {\r\n    case RelationTypes.INFECTIOUS:\r\n      return \"yellow\";\r\n    case RelationTypes.REMOVED:\r\n      return \"limegreen\";\r\n    default:\r\n      return \"deepskyblue\";\r\n  }\r\n};\r\n\r\ninterface BallConfig {\r\n  ctx: CanvasRenderingContext2D;\r\n  index: number;\r\n  timeToRemoved: number;\r\n}\r\n\r\nexport class Ball {\r\n  public position: Vector;\r\n  public velocity: Vector;\r\n  public relation: RelationTypes;\r\n  public radius: number;\r\n  private count: number;\r\n  private timeToRemoved: number;\r\n  ctx: CanvasRenderingContext2D;\r\n  constructor({ ctx, index, timeToRemoved }: BallConfig) {\r\n    this.ctx = ctx;\r\n    this.count = index + 1;\r\n    this.position = new Vector(\r\n      rand(config.canvasWidth),\r\n      rand(config.canvasHeight)\r\n    );\r\n    this.velocity = new Vector(\r\n      Math.round(Math.random() * config.maxVelocity),\r\n      Math.round(Math.random() * config.maxVelocity)\r\n    );\r\n    this.relation =\r\n      this.count <= config.initialInfectious\r\n        ? RelationTypes.INFECTIOUS\r\n        : RelationTypes.SUSCEPTIBLE;\r\n    this.radius = config.ballRadius;\r\n    this.timeToRemoved = timeToRemoved;\r\n  }\r\n\r\n  draw() {\r\n    const ctx = this.ctx;\r\n    ctx.fillStyle = getBallColor(this.relation);\r\n    ctx.shadowColor = getShadowColor(this.relation);\r\n\r\n    ctx.shadowBlur = config.ballRadius;\r\n    ctx.save();\r\n    ctx.scale(1, 1);\r\n    ctx.translate(this.position.x - 10, this.position.y - 10);\r\n    // ctx.fill(new Path2D(BALL_SVG));\r\n    const path = new Path2D();\r\n    path.moveTo(220, 60);\r\n    path.arc(170, 60, config.ballRadius, 0, 2 * Math.PI);\r\n    ctx.scale(0.5, 0.5);\r\n    ctx.fill(path);\r\n    ctx.restore();\r\n  }\r\n\r\n  translate() {\r\n    if (\r\n      this.position.x <= this.radius ||\r\n      this.position.x >= config.canvasWidth - this.radius\r\n    ) {\r\n      this.velocity.x = -this.velocity.x;\r\n    }\r\n    if (\r\n      this.position.y <= this.radius ||\r\n      this.position.y >= config.canvasHeight - this.radius\r\n    ) {\r\n      this.velocity.y = -this.velocity.y;\r\n    }\r\n\r\n    this.position.x += this.velocity.x;\r\n    this.position.y += this.velocity.y;\r\n  }\r\n\r\n  update() {\r\n    this.translate();\r\n    this.draw();\r\n  }\r\n\r\n  infect() {\r\n    this.relation = RelationTypes.INFECTIOUS;\r\n    setTimeout(() => {\r\n      this.relation = RelationTypes.REMOVED;\r\n    }, this.timeToRemoved * 1000);\r\n  }\r\n\r\n  collide(ball: Ball) {\r\n    const tempVelocity = { x: this.velocity.x, y: this.velocity.y };\r\n    this.velocity.x = ball.velocity.x;\r\n    this.velocity.y = ball.velocity.y;\r\n    ball.velocity.x = tempVelocity.x;\r\n    ball.velocity.y = tempVelocity.y;\r\n  }\r\n}\r\n","import { config } from \"../config\";\r\nimport { RelationTypes } from \"../types/relations\";\r\nimport { Ball } from \"./Ball\";\r\n\r\ninterface TrackerConfig {\r\n  ctx: CanvasRenderingContext2D;\r\n  width: number;\r\n  height: number;\r\n  popSize: number;\r\n  timeToRemoved: number;\r\n  transmissionRate: number;\r\n  stats: { S: number; I: number; R: number };\r\n}\r\n\r\nexport class Tracker {\r\n  private width: number;\r\n  private height: number;\r\n  private balls: Ball[];\r\n  private ctx: TrackerConfig[\"ctx\"];\r\n  private popSize: TrackerConfig[\"popSize\"];\r\n  private timeToRemoved: TrackerConfig[\"timeToRemoved\"];\r\n  private transmissionRate: TrackerConfig[\"transmissionRate\"];\r\n  private stats: TrackerConfig[\"stats\"];\r\n\r\n  constructor({\r\n    ctx,\r\n    width,\r\n    height,\r\n    popSize,\r\n    timeToRemoved,\r\n    transmissionRate,\r\n    stats\r\n  }: TrackerConfig) {\r\n    this.width = width;\r\n    this.height = height;\r\n    this.balls = [];\r\n    this.ctx = ctx;\r\n    this.popSize = popSize;\r\n    this.timeToRemoved = timeToRemoved;\r\n    this.transmissionRate = transmissionRate;\r\n    this.stats = stats;\r\n\r\n    this.populate();\r\n    this.update();\r\n  }\r\n  coinFlip() {\r\n    return Math.random() <= this.transmissionRate;\r\n  }\r\n  tryInfect(ball: Ball) {\r\n    if (\r\n      ball.relation === RelationTypes.INFECTIOUS ||\r\n      ball.relation === RelationTypes.REMOVED\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    if (this.coinFlip() === true) {\r\n      ball.relation = RelationTypes.INFECTIOUS;\r\n      setTimeout(() => {\r\n        ball.relation = RelationTypes.REMOVED;\r\n      }, this.timeToRemoved * 1000);\r\n    }\r\n  }\r\n\r\n  update() {\r\n    const lengthBalls = this.balls.length;\r\n    this.ctx.clearRect(0, 0, config.canvasWidth, config.canvasHeight);\r\n    this.balls.forEach(ball => {\r\n      ball.update();\r\n    });\r\n\r\n    for (let i = 0; i < lengthBalls; i++) {\r\n      for (let j = 0; j < lengthBalls; j++) {\r\n        if (i !== j) {\r\n          if (this.isCollided(this.balls[i], this.balls[j])) {\r\n            this.balls[i].collide(this.balls[j]);\r\n            if (this.balls[i].relation === RelationTypes.INFECTIOUS) {\r\n              this.tryInfect(this.balls[j]);\r\n            }\r\n            if (this.balls[j].relation === RelationTypes.INFECTIOUS) {\r\n              this.tryInfect(this.balls[i]);\r\n            }\r\n            this.balls[i].update();\r\n            this.balls[j].update();\r\n          }\r\n        }\r\n      }\r\n    }\r\n    requestAnimationFrame(() => {\r\n      this.update();\r\n    });\r\n  }\r\n  distance(ball1: Ball, ball2: Ball) {\r\n    return Math.sqrt(\r\n      (ball1.position.x - ball2.position.x) *\r\n        (ball1.position.x - ball2.position.x) +\r\n        (ball1.position.y - ball2.position.y) *\r\n          (ball1.position.y - ball2.position.y)\r\n    );\r\n  }\r\n  isCollided(ball1: Ball, ball2: Ball) {\r\n    if (this.distance(ball1, ball2) <= ball1.radius + ball2.radius) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n  populate() {\r\n    for (let i = 0; i < this.popSize; i++) {\r\n      const newBall = new Ball({\r\n        ctx: this.ctx,\r\n        index: i,\r\n        timeToRemoved: this.timeToRemoved\r\n      });\r\n      this.balls.push(newBall);\r\n      this.balls[i].draw();\r\n    }\r\n  }\r\n\r\n  getStats() {\r\n    let S: number = 0;\r\n    let I: number = 0;\r\n    let R: number = 0;\r\n    const relationTypes = this.balls.map(ball => ball.relation);\r\n    relationTypes.forEach(type => {\r\n      if (type === RelationTypes.INFECTIOUS) {\r\n        I += 1;\r\n      }\r\n      if (type === RelationTypes.SUSCEPTIBLE) {\r\n        S += 1;\r\n      }\r\n      if (type === RelationTypes.REMOVED) {\r\n        R += 1;\r\n      }\r\n    });\r\n    console.log(this.balls.length);\r\n    return { S: S, I: I, R: R };\r\n  }\r\n}\r\n","import React, { useEffect, useRef } from \"react\";\r\nimport { config } from \"../config\";\r\nimport { Tracker } from \"./Tracker\";\r\n\r\ninterface Props {\r\n  populationSize: number;\r\n  timeToRemoved: number;\r\n  transmissionRate: number;\r\n  handleSetStats: (stats: { S: number; I: number; R: number }) => void;\r\n  stats: { S: number; I: number; R: number };\r\n}\r\n\r\nexport const Canvas = (props: Props) => {\r\n  const ref = useRef<HTMLCanvasElement>(null);\r\n\r\n  useEffect(() => {\r\n    if (ref.current) {\r\n      const ctx = ref.current.getContext(\"2d\");\r\n      ctx?.clearRect(0, 0, config.canvasWidth, config.canvasHeight);\r\n      if (ctx) {\r\n        const tracker = new Tracker({\r\n          ctx,\r\n          height: config.canvasHeight,\r\n          width: config.canvasWidth,\r\n          popSize: props.populationSize,\r\n          timeToRemoved: props.timeToRemoved,\r\n          transmissionRate: props.transmissionRate,\r\n          stats: props.stats\r\n        });\r\n        const interval = setInterval(() => {\r\n          const stats = tracker.getStats();\r\n          props.handleSetStats({ ...stats });\r\n        }, 1000);\r\n        if (interval) {\r\n          return () => {\r\n            clearInterval();\r\n          };\r\n        }\r\n      }\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [props.populationSize, props.timeToRemoved]);\r\n  return (\r\n    <canvas\r\n      ref={ref}\r\n      width={config.canvasWidth}\r\n      height={config.canvasHeight}\r\n    ></canvas>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\ninterface Props {\r\n  populationSize: number;\r\n  timeToRemoved: number;\r\n  transmissionRate: number;\r\n  setPopulationSize: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n  setTimeToRemoved: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n  setTransmissionRate: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n}\r\n\r\nexport const Form = (props: Props) => {\r\n  return (\r\n    <div>\r\n      <form>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"popsize-input\" aria-describedby=\"popsizeHelp\">\r\n            Antal individer\r\n          </label>\r\n          <small id=\"popsizeHelp\" className=\"form-text text-muted\">\r\n            Se hur resultatet påverkas med olika antal individer i området.\r\n          </small>\r\n          <input\r\n            className={\"form-control\"}\r\n            type=\"number\"\r\n            value={props.populationSize}\r\n            onChange={props.setPopulationSize}\r\n            name=\"population-size\"\r\n            id=\"popsize-input\"\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label\r\n            htmlFor=\"time-to-removed-input\"\r\n            aria-describedby=\"timeToRemovedHelp\"\r\n          >\r\n            Tid till frisk\r\n          </label>\r\n          <small id=\"timeToRemovedHelp\" className=\"form-text text-muted\">\r\n            Se hur resultatet påverkas med olika längder på sjukdomen.\r\n          </small>\r\n          <input\r\n            className={\"form-control\"}\r\n            type=\"number\"\r\n            value={props.timeToRemoved}\r\n            onChange={props.setTimeToRemoved}\r\n            name=\"time-to-removed-input\"\r\n            id=\"time-to-removed-input\"\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label\r\n            htmlFor=\"transmission-rate-input\"\r\n            aria-describedby=\"timeToRemovedHelp\"\r\n          >\r\n            Smittrisk\r\n          </label>\r\n          <small id=\"transmissionRateHelp\" className=\"form-text text-muted\">\r\n            Se hur resultatet påverkas om smittrisken ändras.\r\n          </small>\r\n          <input\r\n            className={\"form-control\"}\r\n            type=\"number\"\r\n            value={props.transmissionRate}\r\n            onChange={props.setTransmissionRate}\r\n            name=\"transmission-rate-input\"\r\n            id=\"transmission-rate-input\"\r\n          />\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\ninterface Props {\r\n  infected: number;\r\n  removed: number;\r\n  susceptible: number;\r\n}\r\n\r\nconst ListItem = (props: {\r\n  text: string;\r\n  textColor: \"dark\" | \"light\";\r\n  bgColor: string;\r\n}) => (\r\n  <li className={\"list-group-item \" + props.bgColor}>\r\n    <span className={\"text-\" + props.textColor}>{props.text}</span>\r\n  </li>\r\n);\r\n\r\nconst Stats = (props: Props) => {\r\n  return (\r\n    <>\r\n      <ul className=\"list-group\">\r\n        <ListItem\r\n          textColor={\"light\"}\r\n          bgColor={\"bg-primary\"}\r\n          text={\"Mottagliga: \" + props.susceptible}\r\n        />\r\n        <ListItem\r\n          textColor={\"light\"}\r\n          bgColor={\"bg-danger\"}\r\n          text={\"Infekterade: \" + props.infected}\r\n        />\r\n        <ListItem\r\n          textColor={\"dark\"}\r\n          bgColor={\"bg-light\"}\r\n          text={\"Tillfrisknade: \" + props.removed}\r\n        />\r\n      </ul>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Stats;\r\n","import React, { useCallback, useState } from \"react\";\nimport \"./App.css\";\nimport { Canvas } from \"./components/Canvas\";\nimport { Form } from \"./components/Form\";\nimport Stats from \"./components/Stats\";\nimport { config } from \"./config\";\n\nfunction App() {\n  const [populationSize, setPopulationSize] = useState<number>(\n    config.initialPopulationSize\n  );\n  const [timeToRemoved, setTimeToRemoved] = useState<number>(\n    config.timeToRemoved\n  );\n  const [susceptibleCount, setSusceptibleCount] = useState<number>(\n    config.initialPopulationSize - config.initialInfectious\n  );\n  const [infectedCount, setInfectedCount] = useState<number>(\n    config.initialInfectious\n  );\n  const [removedCount, setRemovedCount] = useState<number>(0);\n  const [transmissionRate, setTransmissionRate] = useState<number>(\n    config.transmissionRate\n  );\n\n  const handleChangePopulationSize = (\n    e: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    const value = parseInt(e.target.value, 10);\n    if (typeof value === \"number\") {\n      setPopulationSize(value);\n      setSusceptibleCount(value - removedCount - infectedCount);\n    }\n  };\n\n  const handleChangeTimeToRemoved = (\n    e: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    const value = parseFloat(e.target.value);\n    if (typeof value === \"number\") {\n      setTimeToRemoved(value);\n    }\n  };\n\n  const handleChangeTransmissionRate = (\n    e: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    const value = parseFloat(e.target.value);\n    if (typeof value === \"number\") {\n      setTransmissionRate(value);\n    }\n  };\n\n  const handleUpdateStats = (stats: { S: number; I: number; R: number }) => {\n    setInfectedCount(stats.I);\n    setRemovedCount(stats.R);\n    setSusceptibleCount(stats.S);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1 className=\"h1\">SIR Simulering</h1>\n        <Form\n          populationSize={populationSize}\n          setPopulationSize={handleChangePopulationSize}\n          timeToRemoved={timeToRemoved}\n          setTimeToRemoved={handleChangeTimeToRemoved}\n          transmissionRate={transmissionRate}\n          setTransmissionRate={handleChangeTransmissionRate}\n        />\n\n        <Canvas\n          stats={{ S: susceptibleCount, I: infectedCount, R: removedCount }}\n          transmissionRate={transmissionRate}\n          handleSetStats={useCallback(handleUpdateStats, [handleUpdateStats])}\n          timeToRemoved={timeToRemoved}\n          populationSize={populationSize}\n        />\n        <Stats\n          infected={infectedCount}\n          susceptible={susceptibleCount}\n          removed={removedCount}\n        />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst rootEl = document.getElementById(\"root\");\nif (rootEl) {\n  ReactDOM.createRoot(rootEl).render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  );\n}\n\nserviceWorker.register();\n"],"sourceRoot":""}