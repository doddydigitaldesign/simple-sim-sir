{"version":3,"sources":["types/relations.ts","components/Footer.tsx","components/Header.tsx","config.ts","utils/colors.ts","utils/rng.ts","components/Scene.tsx","components/Main.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["RelationTypes","Footer","className","href","Header","config","canvasWidth","window","innerWidth","canvasHeight","innerHeight","ballRadius","maxVelocity","initialInfectious","initialPopulationSize","transmissionRate","timeToRemoved","gravity","timeScale","getBallColor","relation","INFECTIOUS","REMOVED","randBetween","min","max","Math","floor","random","bernoulliEvent","threshold","u","v","sqrt","log","cos","PI","randn","Scene","props","customRef","state","I","initialInfected","R","S","populationSize","ballStates","engine","undefined","render","React","createRef","Engine","Matter","Render","World","Bodies","Events","Mouse","MouseConstraint","create","positionIterations","velocityIterations","scale","x","y","timing","timestamp","world","element","this","current","options","width","height","wireframes","add","rectangle","isStatic","balls","Array","keys","map","ball","fillStyle","SUSCEPTIBLE","ballOptions","frictionStatic","slop","frictionAir","restitution","friction","density","inertia","speed","force","circle","mouse","canvas","mouseConstraint","constraint","stiffness","visible","on","event","pairs","timeCreated","pair","i","timeStamp","timeUpdated","bodyA","bodyB","id","setState","prevState","length","run","clear","setRunning","ref","Component","Main","useState","running","popSize","setPopSize","setInitialInfected","setTimeToRemoved","setTransmissionRate","noValidate","autoComplete","htmlFor","disabled","value","step","onChange","e","target","type","onClick","preventDefault","App","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","onUpdate","onSuccess","catch","error","rootEl","document","getElementById","ReactDOM","createRoot","StrictMode","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.582d327c.chunk.js","sourcesContent":["export enum RelationTypes {\r\n  INFECTIOUS = \"INFECTIOUS\",\r\n  SUSCEPTIBLE = \"SUSCEPTIBLE\",\r\n  REMOVED = \"REMOVED\"\r\n}\r\n","import React from \"react\";\r\nexport const Footer = () => (\r\n  <footer className=\"jumbotron bg-dark text-center\">\r\n    <div className=\"container\">\r\n      <p>\r\n        Source:{\" \"}\r\n        <a href=\"https://github.com/doddydigitaldesign/simple-sim-sir\">\r\n          https://github.com/doddydigitaldesign/simple-sim-sir\r\n        </a>\r\n      </p>\r\n      <p>\r\n        MIT{\" \"}\r\n        <a\r\n          href={\r\n            \"https://github.com/doddydigitaldesign/simple-sim-sir/blob/master/LICENSE\"\r\n          }\r\n        >\r\n          License\r\n        </a>\r\n      </p>\r\n    </div>\r\n  </footer>\r\n);\r\n","import React from \"react\";\r\n\r\nexport const Header = () => {\r\n  return (\r\n    <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n      <a\r\n        className=\"navbar-brand\"\r\n        href=\"https://doddydigitaldesign.github.io/simple-sim-sir/\"\r\n      >\r\n        Contact Disease Mechanics\r\n      </a>\r\n    </nav>\r\n  );\r\n};\r\n","export const config = {\r\n  canvasWidth: window.innerWidth * 0.8,\r\n  canvasHeight: window.innerHeight * 0.8,\r\n  ballRadius: 5,\r\n  maxVelocity: 1,\r\n  initialInfectious: 50,\r\n  initialPopulationSize: 1000,\r\n  transmissionRate: 0.01,\r\n  timeToRemoved: 10000,\r\n  gravity: 0,\r\n  timeScale: 1\r\n};\r\n","import { RelationTypes } from \"../types/relations\";\r\n\r\nexport const getBallColor = (relation: RelationTypes) => {\r\n  switch (relation) {\r\n    case RelationTypes.INFECTIOUS:\r\n      return \"red\";\r\n    case RelationTypes.REMOVED:\r\n      return \"white\";\r\n    default:\r\n      return \"dodgerblue\";\r\n  }\r\n};\r\nexport const getShadowColor = (relation: RelationTypes) => {\r\n  switch (relation) {\r\n    case RelationTypes.INFECTIOUS:\r\n      return \"yellow\";\r\n    case RelationTypes.REMOVED:\r\n      return \"limegreen\";\r\n    default:\r\n      return \"deepskyblue\";\r\n  }\r\n};\r\n","export const rand = (max: number) => 1 + Math.floor(Math.random() * max);\r\nexport const randBetween = (min: number, max: number) =>\r\n  Math.floor(Math.random() * (max - min + 1) + min);\r\nexport const randn: () => number = () => {\r\n  let u = 0,\r\n    v = 0;\r\n  while (u === 0) u = Math.random(); //Converting [0,1) to (0,1)\r\n  while (v === 0) v = Math.random();\r\n  return Math.sqrt(-2.0 * Math.log(u)) * Math.cos(2.0 * Math.PI * v);\r\n};\r\nexport const bernoulliEvent = (threshold: number) => randn() >= threshold;\r\n","import Matter, { Engine, Gravity } from \"matter-js\";\r\nimport React from \"react\";\r\nimport { config } from \"../config\";\r\nimport { RelationTypes } from \"../types/relations\";\r\nimport { getBallColor } from \"../utils/colors\";\r\nimport { bernoulliEvent, randBetween } from \"../utils/rng\";\r\n\r\n// https://codesandbox.io/s/matterjs-4zm7j\r\n// https://brm.io/matter-js/docs/classes/Events.html\r\n// https://brm.io/matter-js/demo/#ballPool\r\ninterface Props {\r\n  setRunning: any;\r\n  populationSize: number;\r\n  timeToRemoved: number;\r\n  transmissionRate: number;\r\n  initialInfected: number;\r\n}\r\ninterface State {\r\n  S: number;\r\n  I: number;\r\n  R: number;\r\n  ballStates: { [key: number]: { relation: RelationTypes; timeStamp: number } };\r\n  render?: Matter.Render;\r\n  engine?: Matter.Engine;\r\n}\r\n\r\nexport class Scene extends React.Component<Props, State> {\r\n  customRef: React.RefObject<HTMLDivElement>;\r\n  constructor(props: Props) {\r\n    super(props);\r\n    this.state = {\r\n      I: props.initialInfected,\r\n      R: 0,\r\n      S: props.populationSize - props.initialInfected,\r\n      ballStates: {},\r\n      engine: undefined,\r\n      render: undefined\r\n    };\r\n    this.customRef = React.createRef();\r\n  }\r\n\r\n  componentDidMount() {\r\n    const Engine = Matter.Engine,\r\n      Render = Matter.Render,\r\n      World = Matter.World,\r\n      Bodies = Matter.Bodies,\r\n      Events = Matter.Events,\r\n      Mouse = Matter.Mouse,\r\n      MouseConstraint = Matter.MouseConstraint;\r\n\r\n    const engine = Engine.create({\r\n      positionIterations: 1,\r\n      velocityIterations: 1\r\n    });\r\n    const gravity: Gravity = { scale: 1, x: config.gravity, y: config.gravity };\r\n    const timing = { timeScale: config.timeScale, timestamp: 0 };\r\n    engine.world.gravity = gravity;\r\n    engine.timing = timing;\r\n    // engine.enableSleeping = true;\r\n    const render = Render.create({\r\n      element: this.customRef.current as HTMLElement,\r\n      engine,\r\n      options: {\r\n        width: config.canvasWidth,\r\n        height: config.canvasHeight,\r\n        wireframes: false\r\n      }\r\n    });\r\n\r\n    World.add(engine.world, [\r\n      // walls\r\n      Bodies.rectangle(config.canvasWidth / 2, 0, config.canvasWidth, 1, {\r\n        isStatic: true\r\n      }),\r\n      Bodies.rectangle(\r\n        config.canvasWidth / 2,\r\n        config.canvasHeight,\r\n        config.canvasWidth,\r\n        1,\r\n        { isStatic: true }\r\n      ),\r\n      Bodies.rectangle(0, config.canvasHeight / 2, 1, config.canvasHeight, {\r\n        isStatic: true\r\n      }),\r\n      Bodies.rectangle(\r\n        config.canvasWidth,\r\n        config.canvasHeight / 2,\r\n        1,\r\n        config.canvasHeight,\r\n        {\r\n          isStatic: true\r\n        }\r\n      )\r\n    ]);\r\n    const balls = [...Array(this.props.populationSize).keys()].map(ball => {\r\n      let fillStyle = getBallColor(RelationTypes.SUSCEPTIBLE);\r\n      if (ball <= config.initialInfectious) {\r\n        fillStyle = getBallColor(RelationTypes.INFECTIOUS);\r\n      }\r\n      const ballOptions: Matter.IBodyDefinition = {\r\n        frictionStatic: 0,\r\n        slop: 0,\r\n        frictionAir: 0,\r\n        restitution: 1,\r\n        friction: 0,\r\n        density: 10,\r\n        inertia: 0,\r\n        speed: 1,\r\n        force: {\r\n          x: randBetween(-config.maxVelocity, config.maxVelocity),\r\n          y: randBetween(-config.maxVelocity, config.maxVelocity)\r\n        },\r\n        render: { fillStyle }\r\n      };\r\n      const ballN = Bodies.circle(\r\n        randBetween(0, config.canvasWidth),\r\n        randBetween(0, config.canvasHeight),\r\n        config.ballRadius,\r\n        ballOptions\r\n      );\r\n      return ballN;\r\n    });\r\n    World.add(engine.world, [...balls]);\r\n\r\n    // add mouse control\r\n    const mouse = Mouse.create(render.canvas),\r\n      mouseConstraint = MouseConstraint.create(engine, {\r\n        mouse: mouse,\r\n        constraint: {\r\n          stiffness: 1,\r\n          render: {\r\n            visible: false\r\n          }\r\n        }\r\n      } as Matter.IMouseConstraintDefinition);\r\n\r\n    World.add(engine.world, mouseConstraint);\r\n\r\n    Events.on(engine, \"collisionStart\", event => {\r\n      var pairs = event.pairs;\r\n      // change object colours to indicate spread of infection\r\n      for (var i = 0; i < pairs.length; i++) {\r\n        var pair = pairs[i];\r\n        const timeCreated = pair.timeCreated;\r\n        const timeStamp = pair.timeUpdated;\r\n        const bodyA = pair.bodyA;\r\n        const bodyB = pair.bodyB;\r\n        /**\r\n         * Check if bodyA was infected from the start\r\n         */\r\n        if (\r\n          bodyA.render.fillStyle === getBallColor(RelationTypes.INFECTIOUS) &&\r\n          !this.state.ballStates[bodyA.id]\r\n        ) {\r\n          this.setState(prevState => ({\r\n            ...prevState,\r\n            ballStates: {\r\n              ...prevState.ballStates,\r\n              [bodyA.id]: {\r\n                relation: RelationTypes.INFECTIOUS,\r\n                timeStamp: timeCreated\r\n              }\r\n            }\r\n          }));\r\n        }\r\n        /**\r\n         * Check if bodyB was infected from the start\r\n         */\r\n        if (\r\n          bodyB.render.fillStyle === getBallColor(RelationTypes.INFECTIOUS) &&\r\n          !this.state.ballStates[bodyB.id]\r\n        ) {\r\n          this.setState(prevState => ({\r\n            ...prevState,\r\n            ballStates: {\r\n              ...prevState.ballStates,\r\n              [bodyB.id]: {\r\n                relation: RelationTypes.INFECTIOUS,\r\n                timeStamp: timeCreated\r\n              }\r\n            }\r\n          }));\r\n        }\r\n        /**\r\n         * Check if bodyA should be removed\r\n         */\r\n        if (\r\n          bodyA.render.fillStyle === getBallColor(RelationTypes.INFECTIOUS) &&\r\n          pair.timeUpdated - this.state.ballStates[bodyA.id]?.timeStamp >=\r\n            this.props.timeToRemoved\r\n        ) {\r\n          this.setState(prevState => ({\r\n            ...prevState,\r\n            I: prevState.I - 1,\r\n            R: prevState.R + 1,\r\n            ballStates: {\r\n              ...prevState.ballStates,\r\n              [bodyA.id]: {\r\n                relation: RelationTypes.REMOVED,\r\n                timeStamp\r\n              }\r\n            }\r\n          }));\r\n          bodyA.render.fillStyle = getBallColor(RelationTypes.REMOVED);\r\n        }\r\n        /**\r\n         * Check if bodyB should be removed\r\n         */\r\n        if (\r\n          bodyB.render.fillStyle === getBallColor(RelationTypes.INFECTIOUS) &&\r\n          pair.timeUpdated - this.state.ballStates[bodyB.id]?.timeStamp >=\r\n            this.props.timeToRemoved\r\n        ) {\r\n          this.setState(prevState => ({\r\n            ...prevState,\r\n            I: prevState.I - 1,\r\n            R: prevState.R + 1,\r\n            ballStates: {\r\n              ...prevState.ballStates,\r\n              [bodyB.id]: {\r\n                relation: RelationTypes.REMOVED,\r\n                timeStamp\r\n              }\r\n            }\r\n          }));\r\n          bodyB.render.fillStyle = getBallColor(RelationTypes.REMOVED);\r\n        }\r\n        /**\r\n         * Check if bodyA should be infected\r\n         */\r\n        if (\r\n          bodyA.render.fillStyle === getBallColor(RelationTypes.SUSCEPTIBLE) &&\r\n          bodyB.render.fillStyle === getBallColor(RelationTypes.INFECTIOUS)\r\n        ) {\r\n          if (bernoulliEvent(this.props.transmissionRate)) {\r\n            if (bernoulliEvent(1 - this.props.transmissionRate)) {\r\n              this.setState(prevState => ({\r\n                ...prevState,\r\n                S: prevState.S - 1,\r\n                I: prevState.I + 1,\r\n                ballStates: {\r\n                  ...prevState.ballStates,\r\n                  [bodyA.id]: {\r\n                    relation: RelationTypes.INFECTIOUS,\r\n                    timeStamp\r\n                  }\r\n                }\r\n              }));\r\n              bodyA.render.fillStyle = getBallColor(RelationTypes.INFECTIOUS);\r\n            }\r\n          }\r\n        }\r\n        /**\r\n         * Check if bodyB should be infected\r\n         */\r\n        if (\r\n          bodyB.render.fillStyle === getBallColor(RelationTypes.SUSCEPTIBLE) &&\r\n          bodyA.render.fillStyle === getBallColor(RelationTypes.INFECTIOUS)\r\n        ) {\r\n          if (bernoulliEvent(1 - this.props.transmissionRate)) {\r\n            this.setState(prevState => ({\r\n              ...prevState,\r\n              S: prevState.S - 1,\r\n              I: prevState.I + 1,\r\n              ballStates: {\r\n                ...prevState.ballStates,\r\n                [bodyB.id]: {\r\n                  relation: RelationTypes.INFECTIOUS,\r\n                  timeStamp\r\n                }\r\n              }\r\n            }));\r\n            bodyB.render.fillStyle = getBallColor(RelationTypes.INFECTIOUS);\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    Engine.run(engine);\r\n\r\n    Render.run(render);\r\n    this.setState({ render, engine });\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    if (this.state.engine) {\r\n      Engine.clear(this.state.engine);\r\n    }\r\n    if (this.state.I === 0) {\r\n      this.props.setRunning(false);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container-fluid jumbotron bg-dark\">\r\n        <div className=\"row text-center justify-content-center\">\r\n          <p className=\"lead\">\r\n            Susceptible: {this.state.S} | Infected: {this.state.I} | Removed:{\" \"}\r\n            {this.state.R}\r\n          </p>\r\n        </div>\r\n        <div className=\"row\">\r\n          <div ref={this.customRef} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { config } from \"../config\";\r\nimport { Scene } from \"./Scene\";\r\n\r\nexport const Main = () => {\r\n  const [running, setRunning] = useState<boolean>(false);\r\n  const [popSize, setPopSize] = useState<number>(config.initialPopulationSize);\r\n  const [initialInfected, setInitialInfected] = useState<number>(\r\n    config.initialInfectious\r\n  );\r\n  const [timeToRemoved, setTimeToRemoved] = useState<number>(\r\n    config.timeToRemoved\r\n  );\r\n  const [transmissionRate, setTransmissionRate] = useState<number>(\r\n    config.transmissionRate\r\n  );\r\n  return (\r\n    <main className=\"text-center\">\r\n      <div>\r\n        <div className=\"row\">\r\n          <div className=\"col\" />\r\n          <div className=\"col\">\r\n            <form noValidate autoComplete={\"off\"}>\r\n              <div className=\"form-row align-items-center\">\r\n                <div className=\"form-group\">\r\n                  <label htmlFor=\"popSize\">\r\n                    Population Size: {popSize} individuals\r\n                  </label>\r\n                  <small id=\"emailHelp\" className=\"form-text\">\r\n                    Determines the total number of individuals used in the\r\n                    simulation. Larger numbers affect performance negatively.\r\n                  </small>\r\n                  <input\r\n                    disabled={running}\r\n                    id=\"popSize\"\r\n                    value={popSize}\r\n                    min={0}\r\n                    step={50}\r\n                    max={5000}\r\n                    onChange={e => {\r\n                      setPopSize(+e.target.value);\r\n                    }}\r\n                    type=\"range\"\r\n                    className={\"form-control-range\"}\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className=\"form-row align-items-center\">\r\n                <div className=\"form-group\">\r\n                  <label htmlFor=\"initialInfected\">\r\n                    Initial Infected: {initialInfected} individuals\r\n                  </label>\r\n                  <small id=\"emailHelp\" className=\"form-text\">\r\n                    Determines the number of infected individuals at the start\r\n                    of the simulation.\r\n                  </small>\r\n                  <input\r\n                    disabled={running}\r\n                    id=\"initialInfected\"\r\n                    value={initialInfected}\r\n                    min={0}\r\n                    step={50}\r\n                    max={popSize}\r\n                    onChange={e => {\r\n                      setInitialInfected(+e.target.value);\r\n                    }}\r\n                    type=\"range\"\r\n                    className=\"form-control-range\"\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className=\"form-row align-items-center\">\r\n                <div className=\"form-group\">\r\n                  <label htmlFor=\"timeToRemoved\">\r\n                    Infection Time: {Math.floor(timeToRemoved / 1000)}s\r\n                  </label>\r\n                  <small id=\"emailHelp\" className=\"form-text\">\r\n                    Determines the amount of time spent in an \"infected\" state.\r\n                  </small>\r\n                  <input\r\n                    disabled={running}\r\n                    id=\"timeToRemoved\"\r\n                    value={timeToRemoved}\r\n                    min={0}\r\n                    step={1000}\r\n                    max={100000}\r\n                    onChange={e => {\r\n                      setTimeToRemoved(+e.target.value);\r\n                    }}\r\n                    type=\"range\"\r\n                    className=\"form-control-range\"\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className=\"form-row align-items-center\">\r\n                <div className=\"form-group\">\r\n                  <label htmlFor=\"transmissionRate\">\r\n                    Virulence: {Math.floor(transmissionRate * 100)}%\r\n                  </label>\r\n                  <small id=\"emailHelp\" className=\"form-text\">\r\n                    Determines the probability or spreading the infection via\r\n                    contact.\r\n                  </small>\r\n                  <input\r\n                    disabled={running}\r\n                    id=\"transmissionRate\"\r\n                    value={transmissionRate}\r\n                    min={0}\r\n                    max={1}\r\n                    step={0.01}\r\n                    onChange={e => {\r\n                      setTransmissionRate(+e.target.value);\r\n                    }}\r\n                    type=\"range\"\r\n                    className=\"form-control-range\"\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className=\"form-row\">\r\n                <button\r\n                  disabled={!running}\r\n                  className=\"btn btn-danger\"\r\n                  onClick={e => {\r\n                    e.preventDefault();\r\n                    setRunning(false);\r\n                  }}\r\n                >\r\n                  Stop\r\n                </button>\r\n                <button\r\n                  disabled={running}\r\n                  className=\"btn btn-primary\"\r\n                  onClick={e => {\r\n                    e.preventDefault();\r\n                    setRunning(true);\r\n                  }}\r\n                >\r\n                  Start\r\n                </button>\r\n              </div>\r\n            </form>\r\n          </div>\r\n          <div className=\"col\" />\r\n        </div>\r\n        {running && (\r\n          <div className=\"row\">\r\n            <div className=\"col-sm\">\r\n              <Scene\r\n                setRunning={setRunning}\r\n                initialInfected={initialInfected}\r\n                transmissionRate={transmissionRate}\r\n                timeToRemoved={timeToRemoved}\r\n                populationSize={popSize}\r\n              />\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </main>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport { Footer } from \"./components/Footer\";\r\nimport { Header } from \"./components/Header\";\r\nimport { Main } from \"./components/Main\";\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <Header />\r\n      <div className=\"App container-fluid bg-dark text-light\">\r\n        <div className=\"row\">\r\n          <div className=\"col\"></div>\r\n          <div className=\"col\">\r\n            <Main />\r\n          </div>\r\n          <div className=\"col\"></div>\r\n        </div>\r\n        <div className=\"row\">\r\n          <div className=\"col\">\r\n            <Footer />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport \"./index.css\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nconst rootEl = document.getElementById(\"root\");\r\nif (rootEl) {\r\n  ReactDOM.createRoot(rootEl).render(\r\n    <React.StrictMode>\r\n      <App />\r\n    </React.StrictMode>\r\n  );\r\n}\r\n\r\nserviceWorker.register();\r\n"],"sourceRoot":""}